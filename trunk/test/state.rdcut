//R preamble
#include <stdlib.h>
#include <time.h>
#include "../luastate.h"
using namespace cpplua;
LuaState L;

int square(lua_State* L) {
  double x = static_cast<double>(lua_tonumber(L, -1));
  lua_pop(L, 1);
  lua_pushnumber(L, x*x);
  return 1;
}

//R setup
//R teardown

//R test Basic stack operations
int n = L.getTop();
L.pushNumber(7);
rassert_equal(L.toNumber<int>(), 7);
L.pop();
rassert_equal(n, L.getTop());

//R test Pushing userdata
int a = 4;
int* x = &a;
int n = L.getTop();
L.pushLightUserdata<int>(x);
rassert(L.toUserdata<int>() == x);
L.pop();
rassert(n == L.getTop());

//R test Working with tables
int N = 10;
int n = L.getTop();
L.newTable();
for(int i=0; i<N; i++) {
  L.pushNumber(i);
  L.pushNumber(i);
  L.setTable();
}

L.pushNil();
while(L.next()) {
  rassert(L.toNumber<int>(-1) == L.toNumber<int>(-2));
  L.pop();
}
L.pop();
rassert_equal(n, L.getTop());

//R test Checking string type
L.pushString("hello world");
rassert_equal(L.type(), StringType);
rassert(L.isString());
rassert(!L.isNumber());
L.pop();

//R test Checking number type
L.pushNumber(6);
rassert_equal(L.type(), NumberType);
rassert(L.isNumber());
rassert(L.isString()); // an integer is a string, too
L.pop();

//R test Checking nil type
L.pushNil();
rassert_equal(L.type(), NilType);
rassert(L.isNil());
L.pop();

//R test Checking function type
L.pushCFunction(square);
rassert_equal(L.type(), FunctionType);
rassert(L.isFunction());
L.pop();

//R test Calling functions
srand(time(0));

for(int i=0; i<100; i++) {
  L.pushCFunction(square);
  double x = (static_cast<double>(rand())/RAND_MAX)*100;
  L.pushNumber(x);
  L.pcall(1,1,0);
  rassert_equal_float(L.toNumber<double>(), x*x);
  L.pop();
}

