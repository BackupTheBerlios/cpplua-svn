//R preamble
#include "../luastate.h"
using namespace cpplua;
LuaState L;
//R setup
//R teardown

//R test Basic stack operations
int n = L.luaGetTop();
L.luaPushNumber(7);
rassert(L.luaToNumber<int>() == 7);
L.luaPop();
rassert(n == L.luaGetTop());

//R test Pushing userdata
int a = 4;
int* x = &a;
int n = L.luaGetTop();
L.luaPushLightUserdata<int>(x);
rassert(L.luaToUserdata<int>() == x);
L.luaPop();
rassert(n == L.luaGetTop());

//R test Working with tables
int N = 10;
int n = L.luaGetTop();
L.luaNewTable();
for(int i=0; i<N; i++) {
  L.luaPushNumber(i);
  L.luaPushNumber(i);
  L.luaSetTable();
}

L.luaPushNil();
while(L.luaNext()) {
  rassert(L.luaToNumber<int>(-1) == L.luaToNumber<int>(-2));
  L.luaPop();
}
L.luaPop();
rassert(n == L.luaGetTop());
