<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="documentation.xsl"?>
<documentation>
<meta/>

<title>Getting Started</title>

<section>Introduction</section>

<p>CppLua is a C++ framework to interoperate with the Lua programming language in an expressive and object-oriented way.
CppLua proposes itself as an alternative to code wrapper generators such as <link href="http://www.swig.org">SWIG</link> or <link href="http://www.tecgraf.puc-rio.br/~celes/tolua/">tolua</link>.
CppLua is somewhat like a <link href="http://www.boost.org/libs/python/doc/">Boost::Python</link> for Lua, although it currently misses many advanced (and frequently used) features of the Boost library.</p>

<chapter>Using <code>LuaState</code></chapter>

<p>CppLua can be used at two levels. At the first level it is simply a straightforward C++ wrapper for the Lua C API.</p>

<p>To access this level of functionality, you simply have to include the luastate.h header file.
This brings you the <code>LuaState</code> class, which is a wrapper around an old plain <code>lua_State</code>. For an example on how to use <code>LuaState</code>, look at the following code, which simply creates a new Lua state and uses Lua to send a greeting to the console:</p>

<code block="1">
#include &lt;luastate.h&gt;
using namespace cpplua;

int main() {
  LuaState L;
  L.getGlobal("print");
  L.pushString("Hello World");
  L.pcall(1, 0, 0);

  return 0;
}
</code>

<p>As you can see, the CppLua equivalent of a Lua API has the same name, but written in a Java-like style.
Almost every Lua API is wrapped in <code>LuaState</code>.</p>

<p>This is a more advanced example to illustrate the use of <code>getTable</code>/<code>setTable</code>:</p>

<code block="1">
#include &lt;iostream&gt;
#include &lt;luastate.h&gt;
using namespace cpplua;

int main() {
  LuaState L;
  L.newTable();
  L.pushNumber(0);
  L.pushNumber(15);
  L.setTable();
  L.pushNumber(1);
  L.pushNumber(30);
  L.setTable();

  for(int i = 0; i &lt; 2; i++) {
    L.pushNumber(i);
    L.getTable();
    std::cout &lt;&lt; L.toNumber&lt;int&gt;() &lt;&lt; std::endl;
    L.pop();
  }

  return 0;
}
</code>

<p>As you can see, many <code>LuaState</code> methods which take indexes as parameters will use sensible defaults if they are not provided: for example, <code>getTable</code> assumes -2 for its parameter, and <code>setTable</code> assumes -3, since these are the most common choices.
This reduces the number of keystrokes without (hopefully) impacting readability.</p>

<chapter>Using CppLua at full power</chapter>

<p>CppLua, however, is much more than a C++ version of <code>lua_State</code>. Infact, including the header <code keyword="0">"cpplua.h"</code> gives you the whole CppLua framework, that is, the ability to manipulate Lua objects directly from C++ code.</p>

<p>Let's start with the usual <em>"Hello World"</em> example:</p>

<code block="1">
#include &lt;cpplua.h&gt;
using namespace cpplua;

int main() {
  LuaState L;
  LuaObject luaPrint = L.global("print");
  luaPrint("Hello World");

  return 0;
}
</code>

<p>As you see, no stack handling is explicitly performed. The first line simply defines a <code>LuaState</code> as in the previous examples. You always need to create a <code>LuaState</code> before starting to use CppLua.</p>

<p>The second line access the Lua global object named <code keyword="0">print</code> and stores it in the <code>LuaObject</code> <code keyword="0">luaPrint</code>. A <code>LuaObject</code> is a bridge between Lua and C++ worlds; you can think of it as a C++ reference to a Lua object. Since Lua functions are first class citizens, it is perfectly legal to store one in a <code>LuaObject</code>.</p>

<p>The third line calls the function, passing the string "Hello World" as a parameter. Nothing hard to understand, here.</p>

<p>Tables are handled as any other Lua object. To create an empty table, use <code>emptyTable</code>, to access table elements, use the common array notation. For example:</p>

<code block="1">
#include &lt;cpplua.h&gt;
#include &lt;cassert&gt;
using namespace cpplua;

int main() {
  LuaState L;
  LuaObject table = L.emptyTable();
  for(int i = 0; i &lt; 10; i++)
    table[i] = i*i;
  table["hello"] = -1.8;
  LuaObject table2 = L.emptyTable();
  table[table2] = "A table index";
  table["x"] = table2;
  table2[0] = 3;
  
  assert(table[table["x"][0]] == 9);
}
</code>

<chapter>Handling member functions</chapter>

<p>CppLua provides a facility to treat member functions (<em>methods</em>, in the following) as ordinary global functions. Here is an example:</p>

<code block="1">
#include &lt;cpplua.h&gt;
using namespace cpplua;

class Dummy {
  int x;
public:
  Dummy(int x) : x(x) {}
  
  int add(int y) {
    return x+y;
  }
};

int main() {
  LuaState L;
  
  Dummy dummy(10);
  L.global("f") = L.method(dummy, &amp;Dummy::add);
  L.doString("temp = f(5)");
  assert(L.global("temp") == 15);
}
</code>

<p>First, a <code keyword="0">Dummy</code> class is created. This class has an encapsulated integer <code keyword="0">x</code> and an <code keyword="0">add</code> method which simply sums its argument to <code keyword="0">x</code>.</p>

<p>In <code keyword="0">main</code> we create an instance of the <code keyword="0">Dummy</code> class, setting its private member to 10. If <code keyword="0">y</code> is any integer variable, calling</p>

<code block="1">
dummy.add(y)
</code>

<p>would result in <code keyword="0">10 + y</code> being returned. If we think of the <code keyword="0">add</code> method as a function taking two arguments, a <code keyword="0">Dummy*</code> and an <code keyword="0">int</code>, fixing a <code keyword="0">Dummy</code> instance has the effect of <em>currying</em> the function, thus producing one with one integer parameter only.</p>

<p>This can be achieved in CppLua using <code keyword="0">method</code>, and passing a reference to a fixed <code keyword="0">Dummy</code> instance and a pointer to member function, as you can see in the example code.</p>

<chapter>Accessing <code>LuaState</code> in functions</chapter>

<p>The ability to register (almost) any kind of function and method to Lua may seem wonderful, but suppose you want to register a function <code keyword="0">dummyTable</code> which creates a new table with just one value where this value and the corresponding key are passed as arguments to the function.</p>

<p>What should the signature of <code keyword="0">dummyTable</code> be like? Something like</p>

<code block="1">
LuaObject dummyTable(LuaObject key, LuaObject value)
</code>

<p>won't do, because we don't have access to the <code>LuaState</code> inside the function body.
For this reason, CppLua behaves differently when you register a function (or method) whose first argument is a <code>LuaState*</code>: the first argument is passed automatically by CppLua upon function calls, so that you can (and should, indeed) ignore it as long as function calling is concerned. You can of course use it in the function definition.</p>

<p>Thus, a possible implementation of <code keyword="0">dummyTable</code> is</p>

<code block="1">
LuaObject dummyTable(LuaState* L, LuaObject key, LuaObject value) {
  LuaObject res = L->emptyTable();
  res[key] = value;
  return res;
}
</code>

<p>and can be used as follows in Lua code:</p>

<code block="1" lang="lua">
t = dummyTable(3, "Hello world")
print(t[3])
</code>

</documentation>
