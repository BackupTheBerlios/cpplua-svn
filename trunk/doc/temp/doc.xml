<?xml version='1.0' encoding='ISO-8859-1'?><?xml-stylesheet type="text/xsl" href="documentation.xsl"?><documentation>
<meta/>

<title>CppLua Documentation</title>

<p>CppLua is a C++ framework to interoperate with Lua programming language in an expressive and object-oriented way.
CppLua proposes itself as an alternative to code wrapper generators such as <link href='http://www.swig.org'>SWIG</link> or <link href='http://www.tecgraf.puc-rio.br/~celes/tolua/'>tolua</link>.
CppLua is somewhat like a <link href='http://www.boost.org/libs/python/doc/'>Boost::Python</link> for Lua, although it currently misses many advanced (and frequently used) features of the Boost library.</p>

<chapter>CppLua Cookbook</chapter>
<section>Using <code>LuaState</code></section>

<p>CppLua can be used at two levels. At the first level it is simply a straightforward C++ wrapper for the Lua C API.</p>

<p>To access this level of functionality, you simply have to include the luastate.h header file.
This brings you the <code>LuaState</code> class, which is a wrapper around an old plain <code>lua_State</code>. For an example on how to use <code>LuaState</code>, look at the following code, which simply creates a new Lua state and uses Lua to send a greeting to the console:</p>

<code block='1' lang='cpp'>
<hl class='dsOthers'>#include &lt;luastate.h&gt;</hl>
<hl class='dsKeyword'>using</hl> <hl class='dsKeyword'>namespace</hl> cpplua;

<hl class='dsDataType'>int</hl> <hl class='dsFunction'>main</hl>() {
  LuaState L;
  L.<hl class='dsFunction'>getGlobal</hl>(<hl class='dsString'>&quot;print&quot;</hl>);
  L.<hl class='dsFunction'>pushString</hl>(<hl class='dsString'>&quot;Hello World&quot;</hl>);
  L.<hl class='dsFunction'>pcall</hl>(<hl class='dsDecVal'>1</hl>, <hl class='dsDecVal'>0</hl>, <hl class='dsDecVal'>0</hl>);

  <hl class='dsKeyword'>return</hl> <hl class='dsDecVal'>0</hl>;
}
</code>

<p>As you can see, the CppLua equivalent of a Lua API has the same name, but written in a Java-like style.
Almost every Lua API is wrapped in <code>LuaState</code>.</p>

<p>This is a more advanced example to illustrate the use of <code>getTable</code>/<code>setTable</code>:</p>

<code block='1' lang='cpp'>
<hl class='dsOthers'>#include &lt;iostream&gt;</hl>
<hl class='dsOthers'>#include &lt;luastate.h&gt;</hl>
<hl class='dsKeyword'>using</hl> <hl class='dsKeyword'>namespace</hl> cpplua;

<hl class='dsDataType'>int</hl> <hl class='dsFunction'>main</hl>() {
  LuaState L;
  L.<hl class='dsFunction'>newTable</hl>();
  L.<hl class='dsFunction'>pushNumber</hl>(<hl class='dsDecVal'>0</hl>);
  L.<hl class='dsFunction'>pushNumber</hl>(<hl class='dsDecVal'>15</hl>);
  L.<hl class='dsFunction'>setTable</hl>();
  L.<hl class='dsFunction'>pushNumber</hl>(<hl class='dsDecVal'>1</hl>);
  L.<hl class='dsFunction'>pushNumber</hl>(<hl class='dsDecVal'>30</hl>);
  L.<hl class='dsFunction'>setTable</hl>();

  <hl class='dsFunction'>for</hl>(<hl class='dsDataType'>int</hl> i = <hl class='dsDecVal'>0</hl>; i &lt; <hl class='dsDecVal'>2</hl>; i++) {
    L.<hl class='dsFunction'>pushNumber</hl>(i);
    L.<hl class='dsFunction'>getTable</hl>();
    std::<hl class='dsFunction'>cout</hl> &lt;&lt; L.<hl class='dsFunction'>toNumber</hl>&lt;<hl class='dsDataType'>int</hl>&gt;() &lt;&lt; std::<hl class='dsFunction'>endl</hl>;
    L.<hl class='dsFunction'>pop</hl>();
  }

  <hl class='dsKeyword'>return</hl> <hl class='dsDecVal'>0</hl>;
}
</code>

<p>As you can see, many <code>LuaState</code> methods which take indexes as parameters will use sensible defaults if they are not provided: for example, <code>getTable</code> assumes -2 for its parameter, and <code>setTable</code> assumes -3, since these are the most common choices.
This reduces the number of keystrokes without (hopefully) impacting readability.</p>

<section>Using CppLua at full power</section>

<p>The real strength of CppLua, however, is not this slightly improved C++ version of <code>lua_State</code>.
Instead, including the header "cpplua.h" gives you the whole CppLua framework, that is, the ability to manipulate Lua objects directly from C++ code.</p>

<p>Let's start with the usual <em>"Hello World"</em> example:</p>

<code block='1' lang='cpp'>
<hl class='dsOthers'>#include &lt;cpplua.h&gt;</hl>
<hl class='dsKeyword'>using</hl> <hl class='dsKeyword'>namespace</hl> cpplua;

<hl class='dsDataType'>int</hl> <hl class='dsFunction'>main</hl>() {
  LuaState L;
  LuaObject luaPr<hl class='dsDataType'>int</hl> = L.<hl class='dsFunction'>global</hl>(<hl class='dsString'>&quot;print&quot;</hl>);
  <hl class='dsFunction'>luaPrint</hl>(<hl class='dsString'>&quot;Hello World&quot;</hl>);

  <hl class='dsKeyword'>return</hl> <hl class='dsDecVal'>0</hl>;
}
</code>

<p>As you see, no stack handling is explicitly performed. The first line simply defines a <code>LuaState</code> as in the previous examples. You always need to create a <code>LuaState</code> before starting to use CppLua.</p>

<p>The second line access the Lua global object named "print" and stores it in the <code>LuaObject</code> <code keyword='0'>luaPrint</code>. A <code>LuaObject</code> is a bridge between Lua and C++ worlds; you can think of it as a C++ reference to a Lua object. Since Lua functions are first class citizens, it is perfectly legal to store one in a <code>LuaObject</code>.</p>

<p>The third line calls the function, passing the string "Hello World" as a parameter. Nothing hard to understand, here.</p>

<p>Tables are handled as any other Lua object. To create an empty table, use <code>emptyTable</code>, to access table elements, use the common array notation. For example:</p>

<code block='1' lang='cpp'>
<hl class='dsOthers'>#include &lt;cpplua.h&gt;</hl>
<hl class='dsOthers'>#include &lt;cassert&gt;</hl>
<hl class='dsKeyword'>using</hl> <hl class='dsKeyword'>namespace</hl> cpplua;

<hl class='dsDataType'>int</hl> <hl class='dsFunction'>main</hl>() {
  LuaState L;
  LuaObject table = L.<hl class='dsFunction'>emptyTable</hl>();
  <hl class='dsFunction'>for</hl>(<hl class='dsDataType'>int</hl> i = <hl class='dsDecVal'>0</hl>; i &lt; <hl class='dsDecVal'>10</hl>; i++)
    table[i] = i*i;
  table[<hl class='dsString'>&quot;hello&quot;</hl>] = -<hl class='dsDecVal'>1</hl>.<hl class='dsFunction'>8</hl>;
  LuaObject table<hl class='dsDecVal'>2</hl> = L.<hl class='dsFunction'>emptyTable</hl>();
  table[table<hl class='dsDecVal'>2</hl>] = <hl class='dsString'>&quot;A table index&quot;</hl>;
  table[<hl class='dsString'>&quot;x&quot;</hl>] = table<hl class='dsDecVal'>2</hl>;
  table<hl class='dsDecVal'>2</hl>[<hl class='dsDecVal'>0</hl>] = <hl class='dsDecVal'>3</hl>;
  
  <hl class='dsFunction'>assert</hl>(<hl class='dsDecVal'>9</hl> , table[table[<hl class='dsString'>&quot;x&quot;</hl>][<hl class='dsDecVal'>0</hl>]]);
}
</code>

<section>Handling member functions</section>


</documentation>
